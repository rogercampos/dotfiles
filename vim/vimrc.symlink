" -------------------------
" GENERAL
" -------------------------

" Must be called first as explained in
" http://vim.1045645.n5.nabble.com/snipMate-doesn-t-work-with-pathogen-td3199469.html
filetype off
set nocompatible
autocmd!

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

"store lots of :cmdline history
set history=10000


set nobackup
set noswapfile

" -------------------------
" GRAPHICAL
" -------------------------
"Visual
set ruler                  " show the cursor position all the time
"set nolazyredraw           " turn off lazy redraw
set wildmenu               " turn on wild menu
set wildmode=longest,list
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*/tmp/*,*.so,*.swp,*.zip  " MacOSX/Linux
set ch=2                   " command line height
" set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

"Visual Cues
set showmatch             " brackets/braces that is
set mat=5                 " duration to show matching brace (1/10 sec)
set laststatus=2          " always show the status line
set ignorecase            " ignore case when searching
set visualbell            " shut the fuck up
set showcmd               " show incomplete cmds down the bottom
set showmode              " show current mode down the bottom
set incsearch             " find the next match as we type the search
set nowrap                " dont wrap lines
set linebreak             " wrap lines at convenient points
set autoread              " reload files (no local changes only)

syntax on
set hlsearch
" set guifont=Monaco:h14
set guifont=Inconsolata-dz:h14

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

set hls


" remap <LEADER> to ',' (instead of '\')
let mapleader = ","


"hide buffers when not displayed
set hidden


"indent settings
set shiftwidth=2
set ts=2
set bs=2
set shiftround
set softtabstop=2
set expandtab
set smarttab
set autoindent

set textwidth=78

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default


"display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅

set formatoptions-=o "dont continue comments when pushing o/O

"vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2


"dont load csapprox if we no gui support - silences an annoying warning
if !has("gui")
    let g:CSApprox_loaded = 1
endif

"map to fuzzy finder text mate stylez
nnoremap <c-f> :CommandTFlush<CR>:CommandT<CR>

"map Q to something useful
noremap Q gq

"make Y consistent with C and D
nnoremap Y y$

" -------------------
" KEYBINDS
" -------------------

"Duplicate a selection
vmap D y'>p

"one-key indentation
nmap > >>
nmap < <<

"Easier beginning/end of line
map H ^
map L $

" -------------------
" /KEYBINDS
" -------------------

"No Help, please
nmap <F1> <Esc>

"Numbers
set number
set numberwidth=5

" Remove whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e

" New filetypes
autocmd BufNewFile,BufRead *.thor setf ruby

" Local config
if filereadable(".vimrclocal")
  source .vimrclocal
endif

" -------------------
" Roger Campos Additions
" Mainly from ryanb vimrc https://github.com/ryanb/dotfiles/blob/master/vimrc
" Also from gary bernhardt at https://github.com/garybernhardt/dotfiles
" -------------------
command! Rroutes :e config/routes.rb
command! Rschema :e db/schema.rb
command! Rseeds :e db/seeds.rb
command! Rgemfile :e Gemfile

" Make shift-tab work
exe 'set t_kB=' . nr2char(27) . '[Z'


" GRB: Put useful info in status line
let g:rails_statusline = 0
set statusline=%f%m%r%h\ [%L]\ [%{&ff}]\ %y%=[%p%%]\ [line:%03l,col:%02v]
hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" GRB: clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<CR>/<BS>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

set cursorline

" Don't show scroll bars in the GUI
set guioptions-=L
set guioptions-=r

"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold

"set winminheight=0

map - 5<C-W>-
map + 5<C-W>+

map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l


set encoding=utf-8
set ttyfast
set ruler

nnoremap <leader>a :Ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" Splits  ,v to open a new vertical split and switch to it
nnoremap <leader>v <C-w>v<C-w>l

" Saving and buffer stuff
" :wqa! Quit saving
nmap <leader>q :wqa!<CR>
nmap <leader>w :w!<CR>
nmap <leader><Esc> :q!<CR>

" NERDTree
map <leader>p :NERDTreeToggle<cr>

autocmd VimEnter *
  \ if &filetype == "ruby" || &filetype == "netrw" |
  \   NERDTree |
  \   wincmd p |
  \ endif

let g:NERDTreeHijackNetrw = 0

" AutoClose
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}'}
let g:AutoCloseProtectedRegions = ["Character"]

let my_home = expand("$HOME/")

" Finally, load custom configs
if filereadable(my_home . '.vimrc.local')
  source ~/.vimrc.local
endif

" BLAAAME
vmap <Leader>gb :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p<CR>

" Tabularize
if exists(":Tab")
  nmap <leader>a\| :Tab /\|<CR>
  vmap <leader>a\| :Tab /\|<CR>
  nmap <leader>a= :Tab /=<CR>
  vmap <leader>a= :Tab /=<CR>
  nmap <leader>a: :Tab /:\zs<CR>
  vmap <leader>a: :Tab /:\zs<CR>
endif


" Press F5 to toggle GUndo tree
nnoremap <F5> :GundoToggle<CR>

set tags+=gems.tags

" Ctrlp wild ignore
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|tmp$\|log$\|coverage$\|public$\|db/migrate$\|log$\|script$\|vendor$'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256 " 256 colors
set background=dark
color grb256

set fo-=t

function! RSpecFile()
  execute("!clear && rspec " . expand("%p"))
endfunction
map <leader>R :call RSpecFile() <CR>
command! RSpecFile call RSpecFile()

function! RSpecCurrent()
  execute("!clear && rspec " . expand("%p") . ":" . line("."))
endfunction
map <leader>r :call RSpecCurrent() <CR>
command! RSpecCurrent call RSpecCurrent()
